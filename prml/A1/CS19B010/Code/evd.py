# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KVCEBe1hFk2HWKXqSDv3sIgd9NDBefyp
"""

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from numpy import linalg as LA
from PIL import Image
import sys

# .....................
A=mpimg.imread('88.jpg')
# In svd we have AX=Xdelta
x,y=np.linalg.eig(A)# x-eigen values,y-eigen vector
z=x.copy()
for i in range(256):
  z[i]=-abs(z[i])

p=z.argsort()#sorting from higher magnitude to lower
x=x[p]
y=y[:,p]

y1=np.array([])#elements in y-axis in the plot
x1=np.array([])#elements in x-axis in the plot
visited=np.zeros(256)

for k in range(255):
  temp=x.copy()
  # print(k) 
  for i in range(256):
      
      if i>=k:       #for all the elements that are higher than k making their values 0
        temp[i]=0
  if k>0 and k<256 and temp[k-1].imag!=0 and visited[k-1]==0:#if the curent last element that is not changed is imaginary it's complex conjugate also need to be included
        visited[k-1]=1
        visited[k]=1
        temp[k]=x[k]    
        k=k+1

  newdelta=np.diag(temp)#this is the new delta

  pp=np.linalg.inv(y)
  newa=y@newdelta@pp

  c=np.subtract(A,newa)
  diff=LA.norm(c,'fro')#frobenius norm for a given k

  y1=np.append(y1,diff)#storing the norms in array as a function of k
  x1=np.append(x1,k)
  
  # print(k)
plt.xlabel("K values")
plt.ylabel("frobenius norm")
plt.plot(x1,y1)
plt.show()